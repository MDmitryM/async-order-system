services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.7.1
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_INIT_LIMIT: 3
      ZOOKEEPER_SYNC_LIMIT: 2
    networks:
      - kafka-net

  kafka1:
    image: confluentinc/cp-server:7.7.1
    hostname: kafka1
    container_name: kafka1
    depends_on:
      - zookeeper
    ports:
      - "9091:9091"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:29091,PLAINTEXT_HOST://localhost:9091
    networks:
      - kafka-net
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:29091 --list"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s

  kafka2:
    image: confluentinc/cp-server:7.7.1
    hostname: kafka2
    container_name: kafka2
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:29092,PLAINTEXT_HOST://localhost:9092
    networks:
      - kafka-net
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:29092 --list"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s

  kafka3:
    image: confluentinc/cp-server:7.7.1
    hostname: kafka3
    container_name: kafka3
    depends_on:
      - zookeeper
    ports:
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka3:29093,PLAINTEXT_HOST://localhost:9093
    networks:
      - kafka-net
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:29093 --list"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 9020:8080
    environment:
      AUTH_TYPE: DISABLED
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka1:29091,kafka2:29092,kafka3:29093
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      kafka3:
        condition: service_healthy
    networks:
      - kafka-net
  kafka-init:
    container_name: kafka-topics-init
    image: confluentinc/cp-kafka:7.7.1
    depends_on:
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      kafka3:
        condition: service_healthy
    entrypoint: ["/bin/sh", "-c"]
    command: |
      "echo 'Waiting for Kafka to be ready...' && \
       cub kafka-ready -b kafka1:29091,kafka2:29092,kafka3:29093 3 30 && \
       kafka-topics --create --topic orders --bootstrap-server kafka1:29091 --partitions 3 --replication-factor 3 --if-not-exists && \
       kafka-topics --create --topic payments --bootstrap-server kafka1:29091 --partitions 3 --replication-factor 3 --if-not-exists && \
       kafka-topics --create --topic shipping --bootstrap-server kafka1:29091 --partitions 3 --replication-factor 3 --if-not-exists && \
       echo 'Topics created successfully!'"
    networks:
      - kafka-net
  api:
    container_name: api-server
    image: mdmitrym/order-system-api:latest
    ports:
      - 8080:8080
    depends_on:
      api-db:
        condition: service_healthy
      kafka-init:
        condition: service_completed_successfully
    env_file:
      - services/api/.env
    environment:
      - ENV=prod
      - API_DB_HOST=api-db
    networks:
      - kafka-net
  api-db:
    container_name: api-db
    image: postgres:latest
    env_file:
      - services/api/.env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 30s
    ports:
      - 5432:5432
    networks:
      - kafka-net
  billing:
    container_name: billing
    image: mdmitrym/order-system-bill:latest
    depends_on:
      kafka-init:
        condition: service_completed_successfully
      api:
        condition: service_started
    networks:
      - kafka-net

  shipping:
    container_name: shipping
    image: mdmitrym/order-system-ship:latest
    depends_on:
      kafka-init:
        condition: service_completed_successfully
      billing:
        condition: service_started
    networks:
      - kafka-net

networks:
  kafka-net:
    driver: bridge