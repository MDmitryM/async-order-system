// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package repository

import (
	"context"
)

const createOrder = `-- name: CreateOrder :one
insert into orders (user_id, total, status, payment_method) 
values ($1, $2, $3, $4)
returning id, user_id, total, status, created_at, payment_method
`

type CreateOrderParams struct {
	UserID        int32  `json:"user_id"`
	Total         int32  `json:"total"`
	Status        string `json:"status"`
	PaymentMethod string `json:"payment_method"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, createOrder,
		arg.UserID,
		arg.Total,
		arg.Status,
		arg.PaymentMethod,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Total,
		&i.Status,
		&i.CreatedAt,
		&i.PaymentMethod,
	)
	return i, err
}

const getOrderByID = `-- name: GetOrderByID :one
select id, user_id, total, status, created_at, payment_method from orders where id = $1
`

func (q *Queries) GetOrderByID(ctx context.Context, id int32) (Order, error) {
	row := q.db.QueryRow(ctx, getOrderByID, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Total,
		&i.Status,
		&i.CreatedAt,
		&i.PaymentMethod,
	)
	return i, err
}

const listOrders = `-- name: ListOrders :many
select id, user_id, total, status, created_at, payment_method from orders order by created_at desc limit $1 offset $2
`

type ListOrdersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListOrders(ctx context.Context, arg ListOrdersParams) ([]Order, error) {
	rows, err := q.db.Query(ctx, listOrders, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Total,
			&i.Status,
			&i.CreatedAt,
			&i.PaymentMethod,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderStatus = `-- name: UpdateOrderStatus :one
update orders set status = $2 where id = $1 returning id, user_id, total, status, created_at, payment_method
`

type UpdateOrderStatusParams struct {
	ID     int32  `json:"id"`
	Status string `json:"status"`
}

func (q *Queries) UpdateOrderStatus(ctx context.Context, arg UpdateOrderStatusParams) (Order, error) {
	row := q.db.QueryRow(ctx, updateOrderStatus, arg.ID, arg.Status)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Total,
		&i.Status,
		&i.CreatedAt,
		&i.PaymentMethod,
	)
	return i, err
}
